generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER MODEL (users table)

model User {
  id               Int        @id @default(autoincrement())
  uid              String     @unique @db.VarChar(255)
  name             String     @unique @db.VarChar(100)
  email            String     @unique @db.VarChar(100)
  createdAt        DateTime   @default(now()) @map("created_at")
  lastLogin        DateTime?  @map("last_login")
  role             String     @default("user") @db.VarChar(10)
  isBlocked        Boolean    @default(false) @map("is_blocked")
  allowedTemplates Template[] @relation("TemplateAllowedUsers")
  Template         Template[]
  Comment          Comment[]
  Like             Like[]

  @@map("users")
}

// TOPIC MODEL (topics table)

model Topic {
  id   Int    @id @default(autoincrement())
  name String @unique

  @@map("topics")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  @@map("tags")
}

enum AccessType {
  PUBLIC
  RESTRICTED
}

model Like {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId Int
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String   @db.Text // @db.text for long comments
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt // Automatically update on edit (Stamp)
  // Relationships

  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade) // Delete comments when that template is delete 
  templateId Int
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   Int

  @@index([templateId]) // For efficient querying
  @@index([authorId]) // For efficient querying
  @@map("comments")
}

// TEMPLATE MODEL (templates table)

model Template {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  imageUrl     String?    @map("image_url")
  topic        String
  tags         String[]   @default([])
  createdAt    DateTime   @default(now())
  // Access setting
  accessType   AccessType @default(PUBLIC)
  allowedUsers User[]     @relation("TemplateAllowedUsers") // many to many relation

  createdBy   User @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById Int
  // Single-line questions

  shortQ1     String?
  showShortQ1 Boolean @default(false)
  shortQ2     String?
  showShortQ2 Boolean @default(false)
  shortQ3     String?
  showShortQ3 Boolean @default(false)
  shortQ4     String?
  showShortQ4 Boolean @default(false)

  // Multi-line question

  desQ1     String?
  showDesQ1 Boolean @default(false)
  desQ2     String?
  showDesQ2 Boolean @default(false)
  desQ3     String?
  showDesQ3 Boolean @default(false)
  desQ4     String?
  showDesQ4 Boolean @default(false)

  // Numeric question

  positiveInt1     String?
  showPositiveInt1 Boolean @default(false)
  positiveInt2     String?
  showPositiveInt2 Boolean @default(false)
  positiveInt3     String?
  showPositiveInt3 Boolean @default(false)
  positiveInt4     String?
  showPositiveInt4 Boolean @default(false)

  // Checkbox question 1

  checkboxQ1Question String?

  // Checkbox q1 options
  checkboxQ1Option1 String?
  checkboxQ1Option2 String?
  checkboxQ1Option3 String?
  checkboxQ1Option4 String?

  // Checkbox question 2

  checkboxQ2Question String?

  // Checkbox q2 options

  checkboxQ2Option1 String?
  checkboxQ2Option2 String?
  checkboxQ2Option3 String?
  checkboxQ2Option4 String?

  // Checkbox question 3

  checkboxQ3Question String?

  // Checkbox q3 options

  checkboxQ3Option1 String?
  checkboxQ3Option2 String?
  checkboxQ3Option3 String?
  checkboxQ3Option4 String?

  // Checkbox question 4

  checkboxQ4Question String?

  // Checkbox q4 options

  checkboxQ4Option1 String?
  checkboxQ4Option2 String?
  checkboxQ4Option3 String?
  checkboxQ4Option4 String?
  Comment           Comment[]
  Like              Like[]

  @@map("templates")
}
