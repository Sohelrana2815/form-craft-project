generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(100)
  email     String    @unique @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at")
  lastLogin DateTime? @map("last_login")
  role      String    @default("user") @db.VarChar(10)
  isBlocked Boolean   @default(false) @map("is_blocked")

  templates   Template[]
  forms       Form[]
  comments    Comment[]
  likes       Like[]
  permissions TemplatePermission[]

  @@map("users")
}

model Topic {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(100)
  templates Template[]

  @@map("topics")
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(100)
  templates Template[] @relation("TaggedTemplates")

  @@map("tags")
}

model Template {
  id          Int        @id @default(autoincrement())
  title       String     @db.VarChar(255)
  description String
  imageUrl    String?    @map("image_url")
  topicId     Int
  createdAt   DateTime   @default(now())
  accessType  AccessType @default(PUBLIC)

  topic       Topic                @relation(fields: [topicId], references: [id], onDelete: Cascade)
  creator     User                 @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   Int
  questions   Question[]
  forms       Form[]
  comments    Comment[]
  likes       Like[]
  tags        Tag[]                @relation("TaggedTemplates")
  permissions TemplatePermission[]

  @@map("templates")
}

model Question {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  description String? // ADD THIS FIELD - for question description [cite: 35]
  type        QuestionType
  order       Int          @default(0)
  showInList  Boolean      @default(false) @map("show_in_list")
  options     String[] // For checkbox/multiple choice

  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId Int
  Answer     Answer[]

  @@map("questions")
}

model Form {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  Int
  responder   User     @relation(fields: [responderId], references: [id], onDelete: Cascade)
  responderId Int
  answers     Answer[]

  @@map("forms")
}

model Answer {
  id         Int      @id @default(autoincrement())
  value      String // Stores answer as JSON string 
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  form       Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId     Int

  @@map("answers")
}

model TemplatePermission {
  id         Int      @id @default(autoincrement())
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  @@unique([templateId, userId])
  @@map("template_permissions")
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId Int
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   Int

  @@index([templateId])
  @@map("comments")
}

model Like {
  id         Int      @id @default(autoincrement())
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  @@unique([userId, templateId])
  @@map("likes")
}

enum AccessType {
  PUBLIC
  RESTRICTED
}

enum QuestionType {
  SHORT_TEXT
  LONG_TEXT
  INTEGER
  CHECKBOX
  MULTIPLE_CHOICE
}
